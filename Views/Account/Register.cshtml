@model SampleDotnetApp.Models.ViewModels.RegisterViewModel
@{
    ViewData["Title"] = "Register";
}
<h2 class="text-center mt-4">@ViewData["Title"]</h2>
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <form asp-action="Register" method="post" id="registerForm" class="p-4 bg-white text-dark">
                <div class="form-group mb-3">
                    <label asp-for="FullName" id="nameRegisterLabel" class="form-label">Full Name</label>
                    <input asp-for="FullName" id="nameRegisterInput" class="form-control" placeholder="Enter your full name" />
                    <span asp-validation-for="FullName" class="text-danger"></span>
                </div>
                <div class="form-group mb-3">
                    <label asp-for="Email" id="emailRegisterLabel" class="form-label">Email</label>
                    <input asp-for="Email" id="emailRegisterInput" class="form-control" placeholder="Enter your email" />
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>
                <div class="form-group mb-3">
                    <label asp-for="Password" id="passwordRegisterLabel" class="form-label">Password</label>
                    <input asp-for="Password" id="passwordRegisterInput" class="form-control" type="password" placeholder="Enter your password" />
                    <span asp-validation-for="Password" class="text-danger"></span>
                </div>
                <div class="form-group mb-3">
                    <label asp-for="ConfirmPassword" id="confirmPasswordRegisterLabel" class="form-label">Confirm Password</label>
                    <input asp-for="ConfirmPassword"  id="confirmPasswordRegisterInput" class="form-control" type="password" placeholder="Confirm your password" />
                    <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                </div>
                <input type="hidden" name="HashedPassword" id="HashedPassword" />
                <button type="submit" class="btn btn-primary w-100">Register</button>
            </form>
            <div class="text-center mt-3">
                <a asp-controller="Account" asp-action="Login" class="btn btn-secondary w-100">Back to Login</a>
            </div>
        </div>
    </div>
    <div class="modal fade" id="alertModal" tabindex="-1" aria-labelledby="alertModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-sm">
            <div class="modal-content">
                <div class="modal-header" id="modalHeader">
                    <h5 class="modal-title" id="alertModalLabel">Alert!</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center" id="modalBody">
                    @TempData["AlertMessage"]
                </div>
                <div class="modal-footer d-flex justify-content-center align-items-center" id="modalFooter">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
    <script>
        const registerDiv = document.getElementById('registerForm');
        const nameRegisterLabel = document.getElementById('nameRegisterLabel');
        const nameRegisterInput = document.getElementById('nameRegisterInput');
        const emailRegisterLabel = document.getElementById('emailRegisterLabel');
        const emailRegisterInput = document.getElementById('emailRegisterInput');
        const passwordRegisterLabel = document.getElementById('passwordRegisterLabel');
        const passwordRegisterInput = document.getElementById('passwordRegisterInput');
        const confirmPasswordRegisterLabel = document.getElementById('confirmPasswordRegisterLabel');
        const confirmPasswordRegisterInput = document.getElementById('confirmPasswordRegisterInput');
        const savedThemeRegisterComponent = localStorage.getItem('theme') || 'theme-light';

        if (savedThemeRegisterComponent === 'theme-dark') {
            registerDiv.classList.remove('bg-white', 'text-dark');
            registerDiv.classList.add('bg-dark', 'text-light');
            nameRegisterLabel.classList.remove('text-dark');
            nameRegisterLabel.classList.add('text-light');
            nameRegisterInput.classList.remove('text-dark', 'bg-white');
            nameRegisterInput.classList.add('text-light', 'bg-dark');
            nameRegisterInput.classList.add('dark-theme');
            emailRegisterLabel.classList.remove('text-dark');
            emailRegisterLabel.classList.add('text-light');
            emailRegisterInput.classList.remove('text-dark', 'bg-white');
            emailRegisterInput.classList.add('text-light', 'bg-dark');
            emailRegisterInput.classList.add('dark-theme');
            passwordRegisterLabel.classList.remove('text-dark');
            passwordRegisterLabel.classList.add('text-light');
            passwordRegisterInput.classList.remove('text-dark', 'bg-white');
            passwordRegisterInput.classList.add('text-light', 'bg-dark');
            passwordRegisterInput.classList.add('dark-theme');
            confirmPasswordRegisterLabel.classList.remove('text-dark');
            confirmPasswordRegisterLabel.classList.add('text-light');
            confirmPasswordRegisterInput.classList.remove('text-dark', 'bg-white');
            confirmPasswordRegisterInput.classList.add('text-light', 'bg-dark');
            confirmPasswordRegisterInput.classList.add('dark-theme');
        }

        document.addEventListener('themeToggle', function (event) {
            const newTheme = event.detail.message;
            if (newTheme === 'theme-dark') {
                registerDiv.classList.remove('bg-white', 'text-dark');
                registerDiv.classList.add('bg-dark', 'text-light');
                nameRegisterLabel.classList.remove('text-dark');
                nameRegisterLabel.classList.add('text-light');
                nameRegisterInput.classList.remove('text-dark', 'bg-white');
                nameRegisterInput.classList.add('text-light', 'bg-dark');
                nameRegisterInput.classList.add('dark-theme');
                emailRegisterLabel.classList.remove('text-dark');
                emailRegisterLabel.classList.add('text-light');
                emailRegisterInput.classList.remove('text-dark', 'bg-white');
                emailRegisterInput.classList.add('text-light', 'bg-dark');
                emailRegisterInput.classList.add('dark-theme');
                passwordRegisterLabel.classList.remove('text-dark');
                passwordRegisterLabel.classList.add('text-light');
                passwordRegisterInput.classList.remove('text-dark', 'bg-white');
                passwordRegisterInput.classList.add('text-light', 'bg-dark');
                passwordRegisterInput.classList.add('dark-theme');
                confirmPasswordRegisterLabel.classList.remove('text-dark');
                confirmPasswordRegisterLabel.classList.add('text-light');
                confirmPasswordRegisterInput.classList.remove('text-dark', 'bg-white');
                confirmPasswordRegisterInput.classList.add('text-light', 'bg-dark');
                confirmPasswordRegisterInput.classList.add('dark-theme');
            } else {
                registerDiv.classList.remove('bg-dark', 'text-light');
                registerDiv.classList.add('bg-white', 'text-dark');
                nameRegisterLabel.classList.remove('text-light');
                nameRegisterLabel.classList.add('text-dark');
                nameRegisterInput.classList.remove('text-light', 'bg-dark');
                nameRegisterInput.classList.add('text-dark', 'bg-white');
                nameRegisterInput.classList.remove('dark-theme');
                emailRegisterLabel.classList.remove('text-light');
                emailRegisterLabel.classList.add('text-dark');
                emailRegisterInput.classList.remove('text-light', 'bg-dark');
                emailRegisterInput.classList.add('text-dark', 'bg-white');
                emailRegisterInput.classList.remove('dark-theme');
                passwordRegisterLabel.classList.remove('text-light');
                passwordRegisterLabel.classList.add('text-dark');
                passwordRegisterInput.classList.remove('text-light', 'bg-dark');
                passwordRegisterInput.classList.add('text-dark', 'bg-white');
                passwordRegisterInput.classList.remove('dark-theme');
                confirmPasswordRegisterLabel.classList.remove('text-light');
                confirmPasswordRegisterLabel.classList.add('text-dark');
                confirmPasswordRegisterInput.classList.remove('text-light', 'bg-dark');
                confirmPasswordRegisterInput.classList.add('text-dark', 'bg-white');
                confirmPasswordRegisterInput.classList.remove('dark-theme');
            }
        });

        document.getElementById("registerForm").addEventListener("submit", async function (e) {
            e.preventDefault(); // Prevent the default form submission
            const nameInput = document.getElementById("nameRegisterInput");
            const emailInput = document.getElementById("emailRegisterInput");
            const passwordInput = document.getElementById("passwordRegisterInput");
            const confirmPasswordInput = document.getElementById("confirmPasswordRegisterInput");
            
            if(passwordInput.value == "" || confirmPasswordInput.value == "" || nameInput.value == "" || emailInput.value == "") {
                e.preventDefault();
                const modalBody = document.getElementById('modalBody');
                modalBody.textContent = "Fill the required fields to proceed!";
                const alertModal = new bootstrap.Modal(document.getElementById('alertModal'));
                alertModal.show();
                return;
            }
            if (passwordInput.value !== confirmPasswordInput.value) {
                e.preventDefault();
                const modalBody = document.getElementById('modalBody');
                modalBody.textContent = "Passwords do not match!";
                const alertModal = new bootstrap.Modal(document.getElementById('alertModal'));
                alertModal.show();
                return;
            }
            const hashedPasswordInput = document.getElementById('HashedPassword');
            const hashedPassword = CryptoJS.SHA256(passwordInput.value).toString();
            hashedPasswordInput.value = hashedPassword;
            passwordInput.value = '';
            confirmPasswordInput.value = '';
            this.submit(); // Now submit the form
        });
 
    </script>
}